
<?php
//!---- (PHP): Параметры Фукнций По Умолчанию:

//? вариант с семантикою:
$doF = function(array $pparams = [])
{
    $key = $pparams["key"] ?? "default";
    echo $key.PHP_EOL;

}; // f:doF
$doF();
$doF(["key"=>"non default"]);

//? рекомендуемый вариант:
/*
    на самом деле в правильном варианте функций
    так default параметры не устанавливаются

    нам потребуется функция 
    способная выполниться в любом случае с любым вводом (!)
    с тремя зонами:
        1. внутренних переменных со значениями по умолчанию
           здесь могут использоваться конфигурации
        2. зона установки из параметров с тестами
        3. зона чистого кода (работа с переменными функции)
*/
// "city.cfg.php"
class CityCfg
{
    const default = CityCfg::list[0];
    const list = 
    [
        "Moscow",
        "New York",
        "San Francisko",
    ];
}

$doF = function(array $pparams = [])
{
        // require_once("city.cfg.php");

        //* зона дефолтов:
        $one = CityCfg::default;
        $two = "Saint Petersburg";
        
        /*
            может показаться зачем проверку делать на тип
            дело в том - что концепция говорит о том - 
            что функция должна выполниться при любых условиях
            на default раскладке - а пользовательский ввод
            это десятое дело
            
            поэтому мы и проверяем - что мы можем заменить 
            default значение в реальности или нет

            никакие исключения - мы выбрасывать не будем

            если пользвоатель облажался с вводом 
            это проблема пользователя
        */

        //* зона установки:
        if(isset($pparams["one"])) 
            if(gettype($pparams["one"]) == "string") 
                if(in_array($pparams["one"], CityCfg::list))
                    $one = $pparams["one"];
        if(isset($pparams["two"])) 
            if(gettype($pparams["two"]) == "string") 
                if(in_array($pparams["two"], CityCfg::list))
                    $two = $pparams["two"];
        /*
            если ветка не проходит может быть выброс исключения
            однако следует помнить что в веб ввод приходит 
            от пользователя хрен знает откуда его взявшего.
        */
        
        //* работа с переменными функции:
        echo "".$one.":".$two.PHP_EOL;
};
$doF(["one"=>"Moscow","two"=>"New York1"]);

?>

